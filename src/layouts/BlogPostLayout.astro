---
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Link from '../components/Link.astro';
import Navbar from '../components/Navbar.astro';
import Newsletter from '../components/Newsletter.astro';
import Tag from '~/components/Tag.astro';
import type { CollectionEntry } from 'astro:content';
import ProjectPageLinks from '~/components/ProjectPageLinks.astro';

type Props = CollectionEntry<'blog'>['data'] & {
  links?: {
    site?: string;
    github?: string;
  };
  content?: string;
};

const currentPath = Astro.url.pathname;

let backLink = '';
let backLinkText = '';

if (currentPath.includes('/projects')) {
  backLink = '/projects';
  backLinkText = 'view all projects';
} else if (currentPath.includes('/writing')) {
  backLink = '/writing';
  backLinkText = 'view all writing';
} else if (currentPath.includes('/speaking')) {
  backLink = '/speaking';
  backLinkText = 'view all speaking';
} else if (currentPath.includes('/about')) {
  backLink = '/about';
  backLinkText = 'learn more about Ryan';
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  heroImageAltText,
  tags,
  links,
} = Astro.props;
---

<!doctype html>
<html lang='en'>
  <BaseHead
    title={SITE_TITLE}
    description={SITE_DESCRIPTION}
  />
  <body>
    <div class='container mx-auto max-w-screen-xl px-4 py-8'>
      <header>
        <Navbar />
      </header>
      <main class='pb-12'>
        <article class='prose prose-zinc mx-auto max-w-screen-lg'>
          <header
            id='article-header'
            class='pt-16 md:pt-24 lg:pt-28 xl:pt-32'
          >
            {
              currentPath.includes('about') ? void 0 : (
                <Link
                  href={backLink}
                  class='group flex justify-start !no-underline transition-all'
                >
                  <svg
                    xmlns='http://www.w3.org/2000/svg'
                    viewBox='0 0 24 24'
                    fill='none'
                    stroke='currentColor'
                    stroke-width='2'
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    class='lucide lucide-arrow-left size-5 transition-all duration-300 group-hover:translate-x-0 group-hover:opacity-100 md:-translate-x-7 md:opacity-0'
                  >
                    <path d='m12 19-7-7 7-7' />
                    <path d='M19 12H5' />
                  </svg>
                  <span class='transition-all duration-300 group-hover:translate-x-0 md:-translate-x-7'>
                    {backLinkText}
                  </span>
                </Link>
              )
            }
            <div class='w-full'>
              {
                heroImage && (
                  <img
                    class='border-border aspect-video w-full rounded-lg border'
                    src={heroImage}
                    alt={heroImageAltText}
                  />
                )
              }
            </div>
            <div>
              <div>
                {
                  pubDate ?
                    <div class='flex flex-col *:not-last:m-0'>
                      <p>
                        Published: <FormattedDate date={pubDate} />
                      </p>
                      {updatedDate && (
                        <p class='text-foreground mt-0 w-fit bg-amber-200'>
                          Updated: <FormattedDate date={updatedDate} />
                        </p>
                      )}
                    </div>
                  : ''
                }
                <h1 class='mb-[.25em]'>{title}</h1>
                <p class='mt-0'>{description}</p>
                {
                  currentPath.includes('projects') && links && (
                    <ProjectPageLinks links={links} />
                  )
                }
              </div>
            </div>
            <slot />
          </header>
          {
            tags && tags.length > 0 && (
              <div class=''>
                <ul class='flex list-none flex-wrap gap-4 pl-0'>
                  {tags.map((tag) => (
                    <Tag
                      name={tag}
                      key={tag}
                    >
                      {tag}
                    </Tag>
                  ))}
                </ul>
              </div>
            )
          }
          {/* @ts-ignore */}
          {
            Astro.props.content && (
              <div class='content'>
                {/* @ts-ignore */}
                <div set:html={Astro.props.content} />
              </div>
            )
          }
        </article>
      </main>
      <Newsletter />
      <Footer />
    </div>
  </body>
</html>
