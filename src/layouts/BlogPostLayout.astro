---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import ProjectPageLinks from '~/components/ProjectPageLinks.astro';
import Tag from '~/components/Tag.astro';
import { cn } from '~/utils/utils';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Link from '../components/Link.astro';
import Navbar from '../components/Navbar.astro';
import Newsletter from '../components/Newsletter.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';

type Props = CollectionEntry<'blog'>['data'] & {
  links?: {
    site?: string;
    github?: string;
  };
  status?: 'shipped' | 'in progress' | 'abandoned';
};

type projectStatus = 'shipped' | 'in progress' | 'abandoned';

const projectStatusConfig = {
  shipped: {
    dotClasses: 'bg-emerald-400 border-emerald-500',
  },
  'in progress': {
    dotClasses: 'bg-amber-400 border-amber-600',
  },
  abandoned: {
    dotClasses: 'bg-rose-400 border-rose-600',
  },
} as const;

const currentPath = Astro.url.pathname;

let backLink = '';
let backLinkText = '';

if (currentPath.includes('/projects')) {
  backLink = '/projects';
  backLinkText = 'view all projects';
} else if (currentPath.includes('/writing')) {
  backLink = '/writing';
  backLinkText = 'view all writing';
} else if (currentPath.includes('/speaking')) {
  backLink = '/speaking';
  backLinkText = 'view all speaking';
} else if (currentPath.includes('/about')) {
  backLink = '/about';
  backLinkText = 'learn more about Ryan';
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  heroImageAltText,
  tags,
  links,
  status,
} = Astro.props;
---

<html lang="en">
  <BaseHead
    title={SITE_TITLE}
    description={SITE_DESCRIPTION}
    image={heroImage}
  />
  <body>
    <div class="container mx-auto max-w-screen-xl p-4">
      <header>
        <Navbar />
      </header>
      <main class="pb-12">
        <article
          class="prose prose-zinc dark:prose-invert mx-auto max-w-screen-lg"
        >
          <header id="article-header" class="pt-16 md:pt-24 lg:pt-28 xl:pt-32">
            <Link
              href={backLink}
              class="group flex justify-start !no-underline transition-all"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-arrow-left size-5 transition-all duration-300 group-hover:translate-x-0 group-hover:opacity-100 md:-translate-x-7 md:opacity-0"
              >
                <path d="m12 19-7-7 7-7"></path>
                <path d="M19 12H5"></path>
              </svg>
              <span
                class="transition-all duration-300 group-hover:translate-x-0 md:-translate-x-7"
              >
                {backLinkText}
              </span>
            </Link>
            <div class="w-full">
              {
                heroImage && (
                  <Image
                    class="border-border aspect-video w-full rounded-lg object-cover"
                    src={heroImage}
                    alt={heroImageAltText ?? ''}
                    width={1920}
                    height={1080}
                  />
                )
              }
            </div>
            <div>
              <div>
                {
                  pubDate ? (
                    <div class="mt-4 flex flex-col *:not-last:m-0">
                      <p>
                        Published: <FormattedDate date={pubDate} />
                      </p>
                      {updatedDate && (
                        <p class="text-foreground dark:text-background mt-0 w-fit bg-amber-200 dark:bg-amber-400">
                          Updated: <FormattedDate date={updatedDate} />
                        </p>
                      )}
                    </div>
                  ) : (
                    ''
                  )
                }
                <h1 class="mb-[.25em] flex items-center gap-x-4">
                  {title}
                  {
                    currentPath.includes('projects') && status && (
                      <div
                        class={cn(
                          'size-3 flex-shrink-0 animate-pulse rounded-full border-2',
                          projectStatusConfig[status as projectStatus]
                            ?.dotClasses,
                        )}
                      />
                    )
                  }
                </h1>
                <p class="mt-0">{description}</p>
                {
                  currentPath.includes('projects') && links && (
                    <ProjectPageLinks links={links} />
                  )
                }
              </div>
            </div>
            <slot />
          </header>
          {
            tags && tags.length > 0 && (
              <div>
                <ul class="flex list-none flex-wrap gap-2 pl-0">
                  {tags.map((tag) => (
                    <Tag name={tag} key={tag} linkable={true}>
                      {tag}
                    </Tag>
                  ))}
                </ul>
              </div>
            )
          }
        </article>
      </main>
      <Newsletter />
      <Footer />
    </div>
  </body>
</html>
