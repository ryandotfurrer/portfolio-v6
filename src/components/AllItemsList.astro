---
import Card from './Card.astro';
import FormattedDate from './FormattedDate.astro';
import Heading from './Heading.astro';
import { cn } from '~/utils/utils';

interface Item {
  collection: string;
  slug?: string;
  id: string;
  data: {
    pubDate?: string;
    title: string;
    description?: string;
    tags: string[];
    webURL?: string;
    slug?: string;
    status?: 'shipped' | 'in progress' | 'abandoned';
  };
}

type projectStatus = 'shipped' | 'in progress' | 'abandoned';

const projectStatusConfig = {
  shipped: {
    dotClasses: 'bg-emerald-400 border-emerald-500',
  },
  'in progress': {
    dotClasses: 'bg-amber-400 border-amber-600',
  },
  abandoned: {
    dotClasses: 'bg-rose-400 border-rose-600',
  },
} as const;

interface Props {
  collection: Item[] | { data: Item[] };
}

const currentPath = Astro.url.pathname;
let itemPath = '';

switch (true) {
  case currentPath.includes('/projects'):
    itemPath = 'projects';
    break;
  case currentPath.includes('/writing'):
    itemPath = 'writing';
    break;
  case currentPath.includes('/speaking'):
    itemPath = 'speaking';
    break;
  case currentPath.includes('/about'):
    itemPath = 'about';
    break;
}

// Handle both direct array and paginated data structure
const collectionData = Array.isArray(Astro.props.collection)
  ? Astro.props.collection
  : Astro.props.collection?.data || [];

// Sort items by pubDate in descending order (newest to oldest)
const sortedCollectionData = collectionData.sort((a, b) => {
  const dateA = a.data.pubDate ? new Date(a.data.pubDate) : new Date(0);
  const dateB = b.data.pubDate ? new Date(b.data.pubDate) : new Date(0);
  return dateB.getTime() - dateA.getTime();
});

console.log(
  'Collection items:',
  sortedCollectionData.map((item) => ({
    collection: item.collection,
    slug: item.slug,
    id: item.id,
    dataSlug: item.data.slug,
    href:
      item.collection === 'newsletter'
        ? item.data.webURL
        : `/${itemPath}/${item.data.slug || item.slug || item.id}/`,
  })),
);
---

<section id="all-items-list" class="">
  {
    itemPath !== 'about' && (
      <Heading level="h2" size="3xl" class="md:pl-4">
        all {itemPath}
      </Heading>
    )
  }
  <ul class="max-w-screen-sm space-y-8 md:space-y-0">
    {
      sortedCollectionData.map((item) => {
        const itemHref =
          item.collection === 'newsletter'
            ? item.data.webURL
            : `/${itemPath}/${item.data.slug || item.slug || item.id}/`;
        return (
          <Card
            href={itemHref}
            hasLink={true}
            variant="transparent"
            class="hover:border-border hover:bg-secondary/60 transition-all md:p-4"
          >
            <Heading
              level="h3"
              size="xl"
              class="mb-0 flex items-center gap-x-4 underline md:no-underline"
            >
              {item.data.title}
              {item.collection === 'projects' && item.data.status && (
                <div
                  class={cn(
                    'size-3 animate-pulse rounded-full border-2 flex-shrink-0',
                    projectStatusConfig[item.data.status as projectStatus]?.dotClasses,
                  )}
                ></div>
              )}
              {item.collection === 'newsletter' && (
                <svg
                  data-icon
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-external-link size-4 transition-all md:-translate-x-2 md:opacity-0 md:group-hover:translate-x-0 md:group-hover:opacity-100 md:group-hover/link:translate-x-0 md:group-hover/link:opacity-100"
                >
                  <path d="M15 3h6v6" />
                  <path d="M10 14 21 3" />
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                </svg>
              )}
            </Heading>
            <div class="flex">
              <span class="text-muted-foreground text-sm">
                {item.data.pubDate && (
                  <FormattedDate date={new Date(item.data.pubDate)} />
                )}{' '}
                | {item.collection}
              </span>
            </div>
            <p class="line-clamp-2 text-sm">{item.data.description}</p>
            <div class="flex flex-wrap gap-x-2">
              {item.data.tags?.map((tag) => (
                <span class='text-sm before:content-["#"]'>{tag}</span>
              ))}
            </div>
          </Card>
        );
      })
    }
  </ul>
</section>
